define Price {
 value: 1000,
 constructor: function(value){
  this.value=value;
 }
}


define CarInsurance {
  services: [],
  constructor: function(services){
    this.services = services;
  }
}

define ServicesFired{
  fired: false,
  constructor: function(fired){
    this.fired = fired;
  }
}

define HouseInsurance {
  size: 70,
  age: 40,
  estimatedValue: 40000,
  covers: [],
  houseInsurancePrice: 0,
  constructor: function(size,age,estimatedValue,covers,houseInsurancePrice){
    this.size = size;
    this.age = age;
    this.estimatedValue = estimatedValue;
    this.covers = covers;
    this.houseInsurancePrice = houseInsurancePrice;
  }
}

define UserBasePrice {
 value: 1000,
 constructor: function(value){
  this.value=value;
 }
}

define InsurancePrice {
 value: 1000,
 constructor: function(value){
  this.value=value;
 }
}

define HouseInsurancePrice {
 value: 1000,
 constructor: function(value){
  this.value=value;
 }
}

define CarInsurancePrice {
 value: 1000,
 constructor: function(value){
  this.value=value;
 }
}

define UserCounter{
  value:0,
  constructor: function(value){
    this.value=value;
  }
}

define SizeFired{
  fired: false,
  constructor: function(fired){
    this.fired = fired;
  }
}

define ValueFired{
  fired: false,
  constructor: function(fired){
    this.fired = fired;
  }
}

define AgeFired{
  fired: false,
  constructor: function(fired){
    this.fired = fired;
  }
}

define CoversFired{
  fired: false,
  constructor: function(fired){
    this.fired = fired;
  }
}

define Users{
  users: [],
  constructor: function(users)
  {
    this.users = users;
  }
}

define User {
  sportRisk: 1,
  age: 50,
  sportRiskFired: false,
  userAgeFired:false,
  userPrice: 100,
  constructor: function(sportRisk,age,sportRiskFired,userAgeFired,userPrice){
    this.sportRisk = sportRisk;
    this.age = age;
    this.sportRiskFired = sportRiskFired;
    this.userAgeFired = userAgeFired;
    this.userPrice = userPrice;
  }
}

define Insurance{
  regionRisk: 1,
  amount: 10000,
  duration: 10,
  numberOfUsers: 1,
  constructor: function(regionRisk,amount,duration,numberOfUsers)
  {
    this.regionRisk = regionRisk;
    this.amount = amount;
    this.duration = duration;
    this.numberOfUsers = numberOfUsers;
  }
}

define NumberOfUsersFired{
  fired: false,
  constructor: function(fired){
    this.fired = fired;
  }
}

define AmountFired{
  fired: false,
  constructor: function(fired){
    this.fired = fired;
  }
}

define DurationFired{
  fired: false,
  constructor: function(fired){
    this.fired = fired;
  }
}

define UserAgeFired{
  fired: false,
  constructor: function(fired){
    this.fired = fired;
  }
}

define RiskFired{
  fired: false,
  constructor: function(fired){
    this.fired = fired;
  }
}

define RegionRiskFired{
  fired: false,
  constructor: function(fired){
    this.fired = fired;
  }
}

rule "services"{
       priority:3,
    when {
        c:CarInsurance;
       price: Price;
      fired: ServicesFired !fired.fired;
    }
    then {
  console.log("Services pravilo CAR: ");
  var totalRisk = 0;
  for(var i=0; i<c.services.length; i++){
    totalRisk+=c.services[i]
  }
  modify(price,function(){this.value *= totalRisk;});
  modify(fired,function(){this.fired = true;});
  console.log(price.value);
    }
  }



rule "size"{
       priority:18,
    when {
        h:HouseInsurance;
      fired: SizeFired !fired.fired;
    }
    then {
  console.log("Size pravilo HOME: ");
  modify(h,function(){this.houseInsurancePrice *= Math.sqrt(h.size/100);});
  modify(fired,function(){this.fired = true;});
  console.log(h.houseInsurancePrice);
    }
  }

rule "age over 5 and below 15"{
       priority:18,
    when {
        h:HouseInsurance h.age>5 && h.age<15;
      fired: AgeFired !fired.fired;
    }
    then {
  console.log("Age pravilo HOME: ");
   modify(h,function(){this.houseInsurancePrice *= 1.05;});
  modify(fired,function(){this.fired = true;});
 console.log(h.houseInsurancePrice);
    }
  }

  rule "age >=15 && age<40"{
       priority:18,
    when {
        h:HouseInsurance h.age>=15 && h.age<40;
      fired: AgeFired !fired.fired;
    }
    then {
  console.log("Age pravilo HOME: ");
   modify(h,function(){this.houseInsurancePrice *= 1.1;});
  modify(fired,function(){this.fired = true;});
  console.log(h.houseInsurancePrice);
    }
  }

  rule "age >=40 && age<70"{
       priority:18,
    when {
        h:HouseInsurance h.age>=40 && h.age<70;
      fired: AgeFired !fired.fired;
    }
    then {
  console.log("Age pravilo HOME: ");
   modify(h,function(){this.houseInsurancePrice *= 1.2;});
  modify(fired,function(){this.fired = true;});
  console.log(h.houseInsurancePrice);
    }
  }

  rule "age >=70"{
       priority:18,
    when {
        h:HouseInsurance h.age>=70;
      fired: AgeFired !fired.fired;
    }
    then {
  console.log("Age pravilo HOME: ");
  modify(h,function(){this.houseInsurancePrice *= 1.4;});
  modify(fired,function(){this.fired = true;});
  console.log(h.houseInsurancePrice);
    }
  }



rule "estimated value"{
       priority:19,
    when {
        h:HouseInsurance;
      fired: ValueFired !fired.fired;
    }
    then {
  console.log("Value pravilo HOME: ");
  console.log(h);
  modify(h,function(){this.houseInsurancePrice = h.estimatedValue/1000;});
  modify(fired,function(){this.fired = true;});
  console.log(h.houseInsurancePrice);
    }
  }

rule "covered perils"{
       priority:18,
    when {
        h:HouseInsurance;
      fired: CoversFired !fired.fired;
    }
    then {
  console.log("Covers pravilo HOME: ");
  var totalRisk = 0;
  for(var i=0; i<h.covers.length; i++){
    totalRisk+=h.covers[i]
  }
  modify(h,function(){h.houseInsurancePrice *= totalRisk;});
  modify(fired,function(){this.fired = true;});
  console.log(h.houseInsurancePrice);
    }
  }


rule RegionRiskFactor {
    priority:15,
 when {
        ins : Insurance;
       price: Price;
       fired: RegionRiskFired !fired.fired;
       users: Users;
    }
    then {
    console.log("Region risk pravilo: ");
    modify(fired,function(){this.fired = true;});
    for(var i=0; i<users.users.length; i++)
    {
      console.log("PETLJA U NOOLSU");
      modify(price,function(){
        this.value+=(users.users[i].userPrice*ins.regionRisk);
      })
    }
   
    console.log(price.value);
  }
}

rule "2-4 users"{
  priority:3,
 when {
        ins : Insurance ins.numberOfUsers>=2 && ins.numberOfUsers<=3;
       price: Price;
       fired: NumberOfUsersFired !fired.fired;
    }
    then {
    console.log("number of users pravilo: ");
    modify(fired,function(){this.fired = true;});
    modify(price,function(){this.value *= 0.9});
    console.log(price.value);
  }

}

rule "4-7 users"{
 priority:3,
 when {
        ins : Insurance ins.numberOfUsers>=4 && ins.numberOfUsers<=7;
       price: Price;
       fired: NumberOfUsersFired !fired.fired;
    }
    then {
    console.log("number of users pravilo: ");
    modify(fired,function(){this.fired = true;});
    modify(price,function(){this.value *= 0.8});
    console.log(price.value);
  }
}

rule "more than 7 users"{
 priority:3,
 when {
        ins : Insurance ins.numberOfUsers>7;
       price: Price;
       fired: NumberOfUsersFired !fired.fired;
    }
    then {
    console.log("number of users pravilo: ");
    modify(fired,function(){this.fired = true;});
    modify(price,function(){this.value *= 0.7});
    console.log(price.value);
  }
}

rule "duration"{
  priority:2,
 when {
        ins : Insurance;
       price: Price;
       fired: DurationFired !fired.fired;
    }
    then {
    console.log("Duration pravilo: ");
    modify(fired,function(){this.fired = true;});
    modify(price,function(){this.value *= ins.duration});
    console.log(price.value);
  }
}

rule "amount"{
  priority:10,
 when {
        ins : Insurance;
       price: Price;
       fired: AmountFired !fired.fired;
       users: Users;
    }
    then {
    console.log("Amount pravilo: ");
    modify(fired,function(){this.fired = true;});
    modify(price,function(){
      this.value *= ins.amount/1000;
      //(ins.amount/1000);
    });
    console.log(price.value);
  }
}

rule "sport risk"{
       priority:20,
    when {
        u:User !u.sportRiskFired;
       price: Price;
    }
    then {
  console.log("Risk pravilo USERUSERUSER: ");
  //modify(price,function(){this.value *= u.sportRisk;});
  modify(u,function(){this.sportRiskFired = true;
   this.userPrice*=this.sportRisk;});
  console.log(u.userPrice);
  
    }
  }

   rule "user age above 65"{
       priority:20,
    when {
        u:User u.age>65 && !u.userAgeFired;
       price: Price;
    }
    then {
  console.log("Age pravilo USERUSERUSER: ");
  //modify(price,function(){this.value *= 2;});
  modify(u,function(){this.userAgeFired = true;
    this.userPrice*=2;});
  console.log(u.userPrice);
    }
  }


   rule "user age between 20 and 65"{
       priority:20,
    when {
        u:User u.age<=65 && u.age>=20 && !u.userAgeFired;
       price: Price;
    }
    then {
  console.log("Age pravilo USERUSERUSER: ");
  //modify(price,function(){this.value *= 1;});
  modify(u,function(){this.userAgeFired = true;
    this.userPrice*=1;});
  console.log(u.userPrice);
  
    }
  }


   rule "user age below 20"{
       priority:20,
    when {
        u:User u.age<20 && !u.userAgeFired;
       price: Price;
    }
    then {
  console.log("Age pravilo USERUSERUSER: ");
  //modify(price,function(){this.value /= 2;});
  modify(u,function(){this.userAgeFired = true;
    this.userPrice*=0.5;
  });
  console.log(u.userPrice);
  
    }
  }