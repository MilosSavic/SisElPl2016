define Price {
 value: 1000,
 constructor: function(value){
  this.value=value;
 }
}


define HouseInsurance {
  size: 70,
  age: 40,
  estimatedValue: 40000,
  covers: [],
  constructor: function(size,age,estimatedValue,covers){
    this.size = size;
    this.age = age;
    this.estimatedValue = estimatedValue;
    this.covers = covers;
  }
}

//ja samo ovako mogu da sprecim beskonacne petlje!
define SizeFired{
  fired: false,
  constructor: function(fired){
    this.fired = fired;
  }
}

define ValueFired{
  fired: false,
  constructor: function(fired){
    this.fired = fired;
  }
}

define AgeFired{
  fired: false,
  constructor: function(fired){
    this.fired = fired;
  }
}

define CoversFired{
  fired: false,
  constructor: function(fired){
    this.fired = fired;
  }
}

rule "size"{
       priority:1,
    when {
        h:HouseInsurance;
       price: Price;
      fired: SizeFired !fired.fired;
    }
    then {
  console.log("Size pravilo HOME: ");
  modify(price,function(){this.value *= Math.sqrt(h.size/100);});
  modify(fired,function(){this.fired = true;});
  console.log(price.value);
    }
  }

rule "age"{
       priority:1,
    when {
        h:HouseInsurance;
       price: Price;
      fired: AgeFired !fired.fired;
    }
    then {
  console.log("Age pravilo HOME: ");
  modify(price,function(){this.value *= (1+h.age/2/100);});
  modify(fired,function(){this.fired = true;});
  console.log(price.value);
    }
  }


rule "estimated value"{
       priority:5,
    when {
        h:HouseInsurance;
       price: Price;
      fired: ValueFired !fired.fired;
    }
    then {
  console.log("Value pravilo HOME: ");
  
  modify(price,function(){this.value = h.estimatedValue/1000;});
  modify(fired,function(){this.fired = true;});
  console.log(price.value);
    }
  }

rule "covered perils"{
       priority:3,
    when {
        h:HouseInsurance;
       price: Price;
      fired: CoversFired !fired.fired;
    }
    then {
  console.log("Covers pravilo HOME: ");
  var totalRisk = 0;
  for(var i=0; i<h.covers.length; i++){
    totalRisk+=h.covers[i]
  }
  modify(price,function(){this.value *= totalRisk;});
  modify(fired,function(){this.fired = true;});
  console.log(price.value);
    }
  }